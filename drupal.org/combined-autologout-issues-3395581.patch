diff --git a/js/autologout.js b/js/autologout.js
index ca3fe7e..dc5d025 100644
--- a/js/autologout.js
+++ b/js/autologout.js
@@ -41,13 +41,32 @@
         return;
       }
 
+      // Attachment may be run multiple times. Check if a #timer element has
+      // been created. If so there is already an attachment done. Skip this
+      // attachment.
+      if ($('#timer').length) {
+        return;
+      }
+
       let paddingTimer;
       let theDialog;
       let t;
       let localSettings;
 
-      // Timer to keep track of activity resets.
-      let activityResetTimer;
+      /**
+       *  Keep track of user active between tabs/windows.
+       */
+      function setUserIsActive() {
+        localStorage.setItem('autologout_page_activity', Date.now());
+      }
+
+      /**
+       * Resolve if user is active in this or other tabs/windows.
+       */
+      function userIsActive() {
+        const delta = Date.now() - (localStorage.getItem('autologout_page_activity') || 0);
+        return localSettings.timeout > delta;
+      }
 
       // Prevent settings being overridden by ajax callbacks by cloning it.
       localSettings = jQuery.extend(true, {}, settings.autologout);
@@ -58,10 +77,10 @@
 
       if (localSettings.refresh_only) {
         // On pages where user shouldn't be logged out, don't set the timer.
+        localStorage.setItem('autologout_page_activity', Date.now());
         t = setTimeout(keepAlive, localSettings.timeout);
       }
       else {
-        settings.activity = false;
         if (localSettings.logout_regardless_of_activity) {
           // Ignore users activity and set timeout.
           let timestamp = Math.round((new Date()).getTime() / 1000);
@@ -76,11 +95,16 @@
             $(event.target).trigger('preventAutologout');
           }));
 
-          // Bind formUpdated events to preventAutoLogout event.
+          // Bind mousemove events to preventAutoLogout event.
           $('body').bind('mousemove', debounce(function (event) {
             $(event.target).trigger('preventAutologout');
           }));
 
+          // Bind touchmove events to preventAutoLogout event for mobile.
+          $('body').bind('touchmove', debounce(function (event) {
+            $(event.target).trigger('preventAutologout');
+          }));
+
           // Replaces the CKEditor5 check because keyup should always prevent autologout.
           document.addEventListener('keyup', debounce(function (event) {
             document.dispatchEvent(new Event('preventAutologout'));
@@ -88,16 +112,7 @@
 
           $('body').bind('preventAutologout', function (event) {
             // When the preventAutologout event fires, we set activity to true.
-            settings.activity = true;
-
-            // Clear timer if one exists.
-            clearTimeout(activityResetTimer);
-
-            // Set a timer that goes off and resets this activity indicator after
-            // half a minute, otherwise sessions never timeouts.
-            activityResetTimer = setTimeout(function () {
-              settings.activity = false;
-            }, 30000);
+            setUserIsActive();
           });
 
           // On pages where the user should be logged out, set the timer to popup
@@ -110,17 +125,22 @@
 
       function init() {
         let noDialog = settings.autologout.no_dialog;
-        if (settings.activity) {
+
+        // If the document does not have focus but is open in another tab or window,
+        // do not display the autologout dialog.
+
+        if (userIsActive()) {
           refresh();
         }
         else {
           // The user has not been active, ask them if they want to stay logged
           // in and start the logout timer.
           paddingTimer = setTimeout(confirmLogout, localSettings.timeout_padding);
+
           // While the countdown timer is going, lookup the remaining time. If
           // there is more time remaining (i.e. a user is navigating in another
           // tab), then reset the timer for opening the dialog.
-          Drupal.Ajax['autologout.getTimeLeft'].autologoutGetTimeLeft(function (time) {
+          getDrupalAjaxTimeLeftObject().autologoutGetTimeLeft(function (time) {
             if (time > 0) {
               clearTimeout(paddingTimer);
               t = setTimeout(init, time);
@@ -146,13 +166,16 @@
           buttons[Drupal.t(yesButton)] = function () {
             cookies.set("Drupal.visitor.autologout_login", Math.round((new Date()).getTime() / 1000));
             $(this).dialog("destroy");
+            theDialog = undefined;
             clearTimeout(paddingTimer);
+            setUserIsActive();
             refresh();
           };
 
           let noButton = settings.autologout.no_button;
           buttons[Drupal.t(noButton)] = function () {
             $(this).dialog("destroy");
+            theDialog = undefined;
             logout();
           };
         }
@@ -165,6 +188,7 @@
           title: localSettings.title,
           buttons: buttons,
           close: function (event, ui) {
+            theDialog = undefined;
             logout();
           }
         });
@@ -173,9 +197,12 @@
       // A user could have used the reset button on the tab/window they're
       // actively using, so we need to double check before actually logging out.
       function confirmLogout() {
-        $(theDialog).dialog('destroy');
+        if (theDialog) {
+          $(theDialog).dialog('destroy');
+          theDialog = undefined;
+        }
 
-        Drupal.Ajax['autologout.getTimeLeft'].autologoutGetTimeLeft(function (time) {
+        getDrupalAjaxTimeLeftObject().autologoutGetTimeLeft(function (time) {
           if (time > 0) {
             t = setTimeout(init, time);
           }
@@ -243,9 +270,6 @@
 
         // Store the original success temporary to be called later.
         const originalSuccess = ajax.options.success;
-        ajax.options.submit = {
-          uactive: settings.activity
-        };
         ajax.options.success = function (response, status, xmlhttprequest) {
           if (typeof response == 'string') {
             response = $.parseJSON(response);
@@ -269,6 +293,13 @@
           return originalSuccess.call(ajax, response, status, xmlhttprequest);
         };
 
+        // If anything goes wrong, log the user out to be safe.
+        const originalError = ajax.options.error;
+        ajax.options.error = function (xmlhttprequest, status, error) {
+          logout();
+          return originalError.call(ajax, xmlhttprequest, status, error);
+        }
+
         try {
           $.ajax(ajax.options);
         }
@@ -277,18 +308,20 @@
         }
       };
 
-      Drupal.Ajax['autologout.getTimeLeft'] = Drupal.ajax({
-        base: null,
-        element: document.body,
-        url: drupalSettings.path.baseUrl + 'autologout_ajax_get_time_left',
-        submit: {
-          uactive: settings.activity
-        },
-        event: 'autologout.getTimeLeft',
-        error: function (XMLHttpRequest, textStatus) {
-          // Disable error reporting to the screen.
-        },
-      });
+      function getDrupalAjaxTimeLeftObject() {
+        return Drupal.ajax({
+              base: null,
+              element: document.body,
+              url: drupalSettings.path.baseUrl + 'autologout_ajax_get_time_left',
+          submit: {
+                uactive: userIsActive(),
+          },
+              event: 'autologout.getTimeLeft',
+              error: function (XMLHttpRequest, textStatus) {
+                // Disable error reporting to the screen.
+              },
+        });
+      }
 
       /**
        * Handle refresh event.
@@ -326,6 +359,13 @@
           return originalSuccess.call(ajax, response, status, xmlhttprequest);
         };
 
+        // If anything goes wrong, log the user out to be safe.
+        const originalError = ajax.options.error;
+        ajax.options.error = function (xmlhttprequest, status, error) {
+          logout();
+          return originalError.call(ajax, xmlhttprequest, status, error);
+        }
+
         try {
           $.ajax(ajax.options);
         }
@@ -334,26 +374,28 @@
         }
       };
 
-      Drupal.Ajax['autologout.refresh'] = Drupal.ajax({
-        base: null,
-        element: document.body,
-        url: drupalSettings.path.baseUrl + 'autologout_ajax_set_last',
-        event: 'autologout.refresh',
-        error: function (XMLHttpRequest, textStatus) {
-          // Disable error reporting to the screen.
-        }
-      });
+      function getDrupalAjaxRefreshObject() {
+        return Drupal.ajax({
+              base: null,
+              element: document.body,
+              url: drupalSettings.path.baseUrl + 'autologout_ajax_set_last',
+              event: 'autologout.refresh',
+          error: function (XMLHttpRequest, textStatus) {
+                // Disable error reporting to the screen.
+              }
+        });
+      }
 
       function keepAlive() {
         if (!document.hidden) {
-          Drupal.Ajax['autologout.refresh'].autologoutRefresh(keepAlive);
+          getDrupalAjaxRefreshObject().autologoutRefresh(keepAlive);
         } else {
           t = setTimeout(keepAlive, localSettings.timeout);
         }
       }
 
       function refresh() {
-        Drupal.Ajax['autologout.refresh'].autologoutRefresh(init);
+        getDrupalAjaxRefreshObject().autologoutRefresh(init);
       }